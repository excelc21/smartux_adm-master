<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org/DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="gpack_promotion_info">

	<typeAlias alias="gpackPackVO" type="com.dmi.smartux.gpack.promotion.vo.GpackPackVO"/>
	<typeAlias alias="gpackPromotionInfoVO" type="com.dmi.smartux.gpack.promotion.vo.GpackPromotionVO"/>
	<typeAlias alias="gpackPromotionContentsVO" type="com.dmi.smartux.gpack.promotion.vo.GpackPromotionContentsVO"/>
	
	<!-- I20 앨범 리스트 조회 쿼리 -->	
	<sql id="getGpackI20AlbumList">
			SELECT
				  A.CATEGORY_ID			  AS CAT_ID,
				  C.ADI_ALBUM_ID          AS ALBUM_ID,
				  MAX(C.SERVICE_ICON)     AS SERVICE_GB,
				  MAX(B.CONTENTS_NAME)    AS ALBUM_TITLE, 
				  MAX(G.HDCONTENT)        AS IS_HD,
				  MAX(DECODE(G.HDCONTENT, 'N', 'Y', 'N'))  AS IS_SD,       
				  MAX(E.SUGGESTED_PRICE)  AS H_PRICE, 
				  MIN(E.SUGGESTED_PRICE)  AS S_PRICE,       
				  MAX(E.RATING)           AS PROGRAM_INFO, 
				  MAX(NVL(E.ONAIR_DATE, '00000000')) AS ONAIR_DATE, 
				  MAX(DECODE(A.SERIES_YN, NULL, 'N', A.SERIES_YN))        AS SERIES_FLAG,
				  MAX(DECODE(DECODE(A.SERIES_YN, NULL, 'N', A.SERIES_YN), 'Y', C.SERIES_NO, '')) AS SERIES_DESC,		            
				  MAX(DECODE(DECODE(A.SERIES_YN, NULL, 'N', A.SERIES_YN), 'Y', B.SERIES_NO, '')) AS SERIES_NO,
				  MAX(A.CLOSE_YN)		  AS CLOSE_YN, 
				  MAX(G.SMI_YN)           AS IS_CAPTION, 
				  F_SERVER_URL_DIST('P','${P.ImgSv.No}','${P.ImgSvFilter.Str}')		  AS IMG_URL,
				  MAX(DECODE(F.POSTER_TYPE, 'Y', F.CONTENT_VALUE, '')) AS WIDTH_IMG,
				  MAX(DECODE(F.POSTER_TYPE, 'V', F.CONTENT_VALUE, '')) AS HEIGHT_IMG,
				  MAX(DECODE(F.POSTER_TYPE, 'P', F.CONTENT_VALUE, '')) AS POSTER_IMG,
				  MAX(E.CATEGORY)         AS CATEGORY,       
				  MAX(B.RANK_NO)          AS RANKING,
				  MAX(E.GENRE_LARGE)	  AS GENRE1,
				  MAX(E.RELEASE_DATE)	  AS RELEASE_DATE,
				  MAX(DECODE(C.WATCH_RIGHT_YN, NULL, 'Y', C.WATCH_RIGHT_YN))	AS WATCH_RIGHT_YN,
				  MAX(ROUND(TO_NUMBER(NVL(C.POINT_SUM,'0'))/ (CASE WHEN NVL(C.POINT_CNT,'0')= '0' THEN 1  ELSE TO_NUMBER(NVL(C.POINT_CNT,'0')) END), 0)) POINT,
				  MAX(DECODE(C.IS_FH, NULL, 'N', C.IS_FH)) AS IS_FH
			      <!--'N' AS IS_FH-->   
			FROM  PT_VO_CATEGORY A, 
			      PT_VO_CATEGORY_MAP B, 
			      PT_LA_ALBUM_MST C, 
			      PT_LA_PACKAGE_ASSET D, 
			      PT_LA_TITLE_ASSET E, 
			      PT_LA_POSTER_ASSET F, 
			      PT_LA_CONTENT_ASSET G 
			WHERE 1=1
		<isEqual property="auto_yn" compareValue="N">
			  AND A.CATEGORY_ID IN (SELECT IMCS_CATEGORY_ID FROM PT_GP_CONTENTS_INFO WHERE PACK_ID = #pack_id# AND IMCS_CATEGORY_ID IS NOT NULL)
		</isEqual>
			  AND (((C.PRE_MAPPING_YN IS NULL OR C.PRE_MAPPING_YN = 'N') AND (B.VIEWING_FLAG = 'V' OR B.VIEWING_FLAG IS NULL)) OR (C.PRE_MAPPING_YN = 'Y' AND B.VIEWING_FLAG = 'V'))
			  AND A.CATEGORY_ID = B.CATEGORY_ID
			  AND A.CATEGORY_GB  = 'I20'
			  AND B.CONTENTS_ID  = C.ADI_ALBUM_ID
			  AND B.CONTENTS_ID  = D.ADI_ALBUM_ID
			  AND C.ADI_ALBUM_ID = D.ADI_ALBUM_ID
			  AND D.ADI_PRODUCT_ID = E.ADI_PRODUCT_ID 
			  AND D.ADI_PRODUCT_ID = F.ADI_PRODUCT_ID
			  AND D.ADI_PRODUCT_ID = G.ADI_PRODUCT_ID
			  AND F.POSTER_TYPE IN ('Y', 'V', 'P')
		 GROUP BY A.CATEGORY_ID, C.ADI_ALBUM_ID
	</sql>
	
	<!-- 팩 정보 목록 조회  -->
	<select id="getGpackPackList" parameterClass="map" resultClass="gpackPackVO">
		SELECT
			PACK_ID
			, PACK_NM
			, VERSION
			, TEMPLATE_TYPE
			, IMCS_CATEGORY_ID
			, CREATED
			, UPDATED
			, CREATE_ID
			, UPDATE_ID
		FROM
			PT_GP_PACK_INF
		WHERE
			PACK_ID = #pack_id#
	</select>
	
	<!-- 프로모션 정보 목록 조회  -->
	<select id="getGpackPromotionList" parameterClass="map" resultClass="gpackPromotionInfoVO">
		SELECT
			PK.PACK_ID
			, PK.TEMPLATE_TYPE
			, PM.CATEGORY_ID
			, PM.CATEGORY_NM
			, PM.CATEGORY_COMMENT
			, PM.PROMOTION_VIDEO_GB
			, PM.PROMOTION_CHNL
      		, (SELECT D.CHANNELNUMBER || '번 ' || D.CHNL_NAME FROM PT_CD_PLAY_CHNL D WHERE D.SERVICE_ID = PM.PROMOTION_CHNL AND D.USE_YN = 'Y') AS PROMOTION_CHNL_INFO
			, PM.AUTO_YN
			, AU.IMCS_CATEGORY_ID
		FROM
			PT_GP_PACK_INFO PK
			, PT_GP_CATEGORY_INFO PM
			,  (SELECT 
					PACK_ID, CATEGORY_ID, IMCS_CATEGORY_ID FROM PT_GP_AUTO_SET_INFO
  					WHERE USE_YN = 'Y'
  				) AU
		 WHERE 
		 	PK.PACK_ID = PM.PACK_ID
			AND PM.PACK_ID = AU.PACK_ID(+)
			AND PM.CATEGORY_ID = AU.CATEGORY_ID(+)
		 	AND PK.PACK_ID = #pack_id#
		 	AND PM.CATEGORY_YN = 'N'
		 	AND PM.USE_YN = 'Y'
		 ORDER BY PM.ORDERED
	</select>
	
	<!-- 플레이리스트 정보 목록 조회  -->
	<select id="getGpackPlaylistList" parameterClass="com.dmi.smartux.gpack.promotion.vo.GpackPromotionVO" resultClass="com.dmi.smartux.gpack.promotion.vo.GpackPlaylistVO">
		SELECT PL.PLAYLIST_NM AS P_TITLE , 
		       PL.PREVIEW_IMCS_ALBUM_ID AS P_ALBUMID , 
		       PL.FEATURE_IMCS_ALBUM_ID AS ALBUMID , 
		       NULL AS SERVICE_ID , 
		       MAX(A.CATEGORY_ID) AS CATEGORY_ID 
		  FROM PT_GP_PACK_INFO PK , 
		       PT_GP_CATEGORY_INFO PM , 
		       PT_GP_PLAYLIST_INFO PL , 
		       PT_VO_CATEGORY A , 
		       PT_VO_CATEGORY_MAP B , 
		       PT_LA_ALBUM_MST C 
		 WHERE 1=1 
		       AND (((C.PRE_MAPPING_YN IS NULL OR C.PRE_MAPPING_YN = 'N') AND (B.VIEWING_FLAG = 'V' OR B.VIEWING_FLAG IS NULL)) OR (C.PRE_MAPPING_YN = 'Y' AND B.VIEWING_FLAG = 'V')) 
		       AND PK.PACK_ID = #pack_id# 
		       AND PM.CATEGORY_ID = #category_id# 
		       AND PM.CATEGORY_YN = 'N' 
		       AND PK.PACK_ID = PM.PACK_ID 
		       AND PK.PACK_ID = PL.PACK_ID 
		       AND PM.CATEGORY_ID = PL.CATEGORY_ID 
		       AND PL.USE_YN = 'Y' 
		       AND A.CATEGORY_ID = B.CATEGORY_ID 
		       AND A.CATEGORY_GB = 'I20' 
		       AND B.CONTENTS_ID = C.ADI_ALBUM_ID
		 GROUP BY PL.PLAYLIST_NM, 
		       PL.PREVIEW_IMCS_ALBUM_ID, 
		       PL.FEATURE_IMCS_ALBUM_ID, 
		       PL.ORDERED 
		ORDER BY PL.ORDERED		
	</select>
	
	<select id="getGpackContentsView" parameterClass="com.dmi.smartux.gpack.promotion.vo.GpackPromotionVO" resultClass="gpackPromotionContentsVO">
		SELECT 
		       GP.MOVEPATH_TYPE AS TYPE,
		       GP.CONTENTS_NM AS TITLE, 
		       F_SERVER_URL_DIST('I','${P.ImgSv.No}','${P.ImgSvFilter.Str}') AS IMGURL, 
		       GP.IMG_FILE AS IMG, 
		       (CASE WHEN GP.MOVEPATH_TYPE = 'MT001' THEN '' WHEN GP.MOVEPATH_TYPE = 'MT005' THEN ''  ELSE GP.MOVEPATH END) AS LINK,
		       (CASE WHEN GP.MOVEPATH_TYPE = 'MT005' THEN GP.MOVEPATH ELSE '' END) AS SERVICE_ID,
		       GP.IMCS_CATEGORY_ID AS CATEGORY_ID,
		       (CASE WHEN GP.MOVEPATH_TYPE = 'MT001' THEN GP.MOVEPATH ELSE '' END) AS PRODUCT_CODE,
		       GP.DAL_TYPE AS DAL_TYPE,
		       IMCS.CAT_ID AS CAT_ID,
		       GP.ALBUM_ID AS ALBUM_ID,
		       IMCS.ALBUM_TITLE AS ALBUM_TITLE,
		       GP.ORDERED AS ORDERED,
		       IMCS.IMG_URL AS IMG_URL,
		       IMCS.HEIGHT_IMG AS H_IMG,
		       IMCS.WIDTH_IMG AS W_IMG,
			   IMCS.SERIES_FLAG AS SERIES_FLAG,
			   IMCS.SERIES_DESC AS SERIES_DESC,
			   IMCS.SERIES_NO AS SERIES_NO,
			   IMCS.CLOSE_YN AS CLOSE_YN,
			   IMCS.IS_HD AS IS_HD,
			   IMCS.PROGRAM_INFO AS PROGRAM_INFO,
			   IMCS.ONAIR_DATE AS ONAIR_DATE,
			   IMCS.IS_CAPTION AS IS_CAPTION,
			   IMCS.GENRE1 AS GENRE1,
			   IMCS.RELEASE_DATE AS RELEASE_DATE,
			   IMCS.WATCH_RIGHT_YN AS WATCH_RIGHT_YN, 
			   IMCS.IS_FH
		  FROM PT_GP_CONTENTS_INFO GP,
		       (
		       <include refid="getGpackI20AlbumList"/>    
		       )IMCS
		 WHERE 1=1
		   AND GP.PACK_ID = #pack_id#
		   AND GP.CATEGORY_ID = #category_id#
		   AND GP.USE_YN = 'Y'
		   AND GP.IMCS_CATEGORY_ID = IMCS.CAT_ID (+)
		   AND NVL(GP.ALBUM_ID, '1') = IMCS.ALBUM_ID (+)
		 ORDER BY GP.ORDERED
	</select>
	
	<!-- 앨범 정보 조회 -->
	<select id="getGpackPromotionAlbumList" parameterClass="map" resultClass="gpackPromotionContentsVO">
		SELECT * FROM (
		
				SELECT 	IMCS.ALBUM_ID, 
				       	IMCS.CAT_ID AS CATEGORY_ID, 
				       	IMCS.ALBUM_TITLE, 
				       	IMCS.RANKING AS ORDERED, 
				       	IMCS.IMG_URL, 
				       	IMCS.WIDTH_IMG AS W_IMG, 
				       	IMCS.HEIGHT_IMG AS H_IMG, 
				       	IMCS.SERIES_FLAG, 
				       	IMCS.SERIES_DESC, 
				       	IMCS.SERIES_NO,
				       	IMCS.CLOSE_YN, 
				       	IMCS.RANKING,
				       	IMCS.IS_HD, 
				       	IMCS.PROGRAM_INFO, 
				       	IMCS.ONAIR_DATE, 
				       	IMCS.IS_CAPTION, 
				       	IMCS.GENRE1, 
				       	IMCS.RELEASE_DATE, 
				       	IMCS.WATCH_RIGHT_YN, 
			   			IMCS.IS_FH
				  FROM 	PT_GP_AUTO_SET_INFO AI,
					    (  
							<include refid="getGpackI20AlbumList"/>
					    ) IMCS
				 WHERE 	1=1
				 	AND AI.IMCS_CATEGORY_ID = IMCS.CAT_ID
				 	AND AI.CATEGORY_ID = #promotion_id#
				 	AND IMCS.CAT_ID = #imcs_category_id#
				   
		 ) 
		 WHERE 1=1
		 ORDER BY ORDERED
	</select>
	
	<!-- 최신회차 album_id 데이터 갱신 -->
	
	<!-- 1) PT_GP_CONTENTS_INFO_TEMP Table 에 들어있는 album_id 목록조회 -->
	<select id="getImcsCategoryIdList" parameterClass="String" resultClass="String">
		SELECT IMCS_CATEGORY_ID 
		  FROM PT_GP_CONTENTS_INFO_TEMP 
		 WHERE PACK_ID = #pack_id# 
		   AND ALBUM_ID IS NOT NULL
	</select>
	
	<!-- 2) imcs_category_id 최신회차 album_id 조회 -->
	<select id="getLatestAlbumId" parameterClass="String" resultClass="String">
		SELECT T.CONTENTS_ID
		  FROM (
		  		SELECT T1.CONTENTS_ID 
				  FROM PT_VO_CATEGORY_MAP T1, PT_LA_ALBUM_MST T2
				 WHERE T1.CATEGORY_ID = #imcs_category_id#
				   AND (((T2.PRE_MAPPING_YN IS NULL OR T2.PRE_MAPPING_YN = 'N') AND (T1.VIEWING_FLAG = 'V' OR T1.VIEWING_FLAG IS NULL)) OR ((T2.PRE_MAPPING_YN = 'Y') AND (T1.VIEWING_FLAG = 'V')))
				   AND T1.CONTENTS_ID  = T2.ADI_ALBUM_ID
				 ORDER BY TO_NUMBER(T1.SERIES_NO) DESC
		  ) T
		 WHERE ROWNUM = 1
	</select>
	
	<!-- 3) PT_GP_CONTENTS_INFO_TEMP Table album_id 갱신 -->
	<update id="updateLatestAlbumIdForTemp" parameterClass="map">
		UPDATE PT_GP_CONTENTS_INFO_TEMP
		   SET ALBUM_ID = #latest_album_id#
		 WHERE IMCS_CATEGORY_ID = #imcs_category_id#
	</update>
	
	<!-- 4) PT_GP_CONTENTS_INFO album_id 갱신 -->
	<update id="updateLatestAlbumId" parameterClass="map">
		UPDATE PT_GP_CONTENTS_INFO
		   SET ALBUM_ID = #latest_album_id#
		 WHERE IMCS_CATEGORY_ID = #imcs_category_id#
	</update>
	
</sqlMap>